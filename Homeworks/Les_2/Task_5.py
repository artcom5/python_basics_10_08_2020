"""
5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
У пользователя необходимо запрашивать новый элемент рейтинга.
Если в рейтинге существуют элементы с одинаковыми значениями, то новый
элемент с тем же значением должен разместиться после них.
Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].
"""

list_0 = [10, 7, 5, 3, 3, 2]

# Пока True..
while True:
    try:
        # До тех пор пока пользователь не введет число.
        element = int(input('Введите элемент рейтенга: '))
        break
    except ValueError:
        print('Ввод только цыфры!!!')    # Замучаем пользователя, пока не введет верно.

# Вариант 1

list_0.append(element)    # Добавить элемент в конец списка.
list_0.sort(reverse=True)    # Сделать сортировку в обратном порядке.
print(list_0)

# Вариант 2
"""
На случай, если список по рейтингу будет большой и вариант
для сортировки с реверсом будет занимать время и ресурсы.
"""
if element is not list_0:    # Проверить элемент в списке, если нет.
    for index_num, val in enumerate(list_0):    # Перебрать список.
        if val < element:    # Если элемент больше найденного.
            list_0.insert(index_num, element)    # Втавить элемент и выйти из цикла.
            break
    else:
        list_0.append(element)    # Иначе добавить элемент в конец списка.
else:    # Иначе элемент есть в списке.
    position = list_0.index(element)    # Получить позицию элемента.
    pieces = list_0.count(element)    # Получить количество элементов.
    list_0.insert(position + pieces, element)    # Вставить элемент в конце таких же элементов.
print(list_0)